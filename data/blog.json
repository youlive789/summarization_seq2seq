[
    {
        "TITLE": "[HackerRank] Tree: Huffman Decoding",
        "TEXTCONTENT" : "자료구조에 익숙해지기 위해 HackerRank 문제들을 공부중이다. 그 중 미디움 난이도 트리문제를 보면서 재미있었던 문제가 바로 이 문제이다. 허프만 디코딩 문제는 트리를 순회하면서 이진 문자열을 디코딩하는 문제이다. 주의할 점은 for문을 돌면서 idx가 증가한다는 것과 부분 문자열로 자를 때 인덱스 계산을 잘 해줘야 한다는 점이다. 이 두 부분을 디버깅하는데 시간을 오래 썼지만 접근방법은 유효했다."
    },
    {
        "TITLE": "[코드업 3707] 합의 개수",
        "TEXTCONTENT" : "동적계획법이 필요한 문제들에서 return 값이 있도록 재귀함수를 설계하는 연습을 진행 중이다. 해당 문제는 전형적인 동적계획법과 재귀함수를 이용해서 간단하게 풀이가 가능한 문제였다. 요즘 고민은 알고리즘 문제를 풀면서 너무 재귀함수, 백트래킹, 동적계획법 범주에 빠져있다보니 모든 문제를 재귀함수와 캐싱전략으로 풀이하려고 하는 습관이 들어버린 점이다. 예를 들어 연속합 문제 같은 경우에는 재귀함수와 캐싱전략을 쓰면 오히려 더 미궁 속에 빠지고 만다. 자료구조를 이용해서 풀 수 있는 문제들을 연습해 볼 시간이 온 것 같다."
    },
    {
        "TITLE": "[오일러 프로젝트 23] 두 초과수의 합으로 나타낼 수 없는 모든 양의 정수의 합은?",
        "TEXTCONTENT": "해당 문제의 경우 boolean 배열 통해서 초과수를 저장해 두는 것이 효율적이다. 동적 배열에 무식하게 초과수를 넣어두기 시작하면 다시 찾아야하는 오버헤드가 발생한다! 초과수를 계산하는 부분을 최적화하면 좀 더 빠른시간안에 계산이 가능하다. 약수에 관련한 최적화 방법을 다시 공부해봐야겠다."
    },
    {
        "TITLE": "Text Summarization (1) - TextRank 알고리즘",
        "TEXTCONTENT": "문서를 요약하는 작업은 사람에게도 꾀 벅찬 작업이다. 문서의 정보손실을 최소화하면서 텍스트의 길이를 줄여야하기 때문에 우리는 문서를 요약할 때 문서에 없던 단어를 사용하기도하고, 자신만의 문체가 들어가기도 한다. 이런 문서요약 작업을 컴퓨터에게 시킬순 없을까? 시리즈로 문서요약 작업에 대해 알아보자! 자동으로 문서를 요약할 때 보통 두 가지의 접근방법이 있다. 하나는 추출적 요약(extractive summarization)과 다른 하나는 추상적 요약(abstractive summarization)이다. 추출적 요약의 경우에는 본문에 존재하는 문장 중에서 중요한 문장을 추출하여 문서를 요약하는 기법이다. 추상적 요약은 사람이 문서를 요약하듯이 요약하는 방법이다. 따라서 문서에 없던 단어나 스타일이 반영될 수 있다. 텍스트 랭크는 구글의 페이지 랭크를 변형하여 문서를 요약하는 기법이다. 페이지 랭크는 문서를 그래프 구조로 표현한 상태에서 지속적으로 중요도를 업데이트하여 랭킹을 메기는 알고리즘이다. "
    }
]